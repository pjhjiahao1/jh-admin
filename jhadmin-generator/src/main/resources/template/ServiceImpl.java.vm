package ${package}.${moduleName}.service.impl;

import com.github.pagehelper.PageInfo;
import com.github.pagehelper.PageHelper;
import lombok.RequiredArgsConstructor;
import me.jiahao.utils.Conversion;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Map;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.mapper.${className}Mapper;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.entity.bo.${className}BO;


@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl implements ${className}Service {

    private final ${className}Mapper ${classname}Mapper;
    private final Conversion conversion;

    @Override
    public PageInfo<${className}Entity> listForPage(Map<String,Object> params) {
        PageHelper.startPage(Integer.parseInt(params.get("currentPage").toString()), Integer.parseInt(params.get("pageSize").toString()));
        List<${className}Entity> list = ${classname}Mapper.listForPage(params);
        PageInfo<${className}Entity> pageInfo = new PageInfo<>(list);
        return pageInfo;
    }


    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,timeout=36000,rollbackFor=Exception.class)
    @Override
    public R save(${className}Entity ${classname}Entity) {
        int count = ${classname}Mapper.save(${classname}Entity);
        return R.common(count);
    }

    @Override
    public R update(${className}Entity ${classname}Entity) {
        int count = ${classname}Mapper.update(${classname}Entity);
        return R.common(count);
    }

    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT,timeout=36000,rollbackFor=Exception.class)
    @Override
    public R remove(Long[] ids) {
        int count = ${classname}Mapper.batchRemove(ids);
        return R.common(count);
    }

    @Override
    public List<${className}BO> find${className}(Map<String, Object> params) {
        List<${className}Entity> list = ${classname}Mapper.listForPage(params);
        List<${className}BO> data = conversion.typeConversion(new ${className}BO(), list);
        return data;
    }

}